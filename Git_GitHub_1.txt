git - 분산형 버전 관리 시스템
github - 공유 시스템

TIL today i learned
markup 구조를 잡는..
markdown

markdwon cheat sheet
테크니컬 라이팅
devrel

윈도우 gui
cli command line interface

ls = list
목록

touch 2.txt
2.txt 만들기

rm 2.txt
2.txt 삭제

mkdir 2
2 폴더 만들기

cd 2
2 폴더 가기

cd ..
상위 폴더 가기

버전 - 컴퓨터 소프트웨어의 특정 상태

git init  - 메인 폴더 설정
git add index.html
git commit -m 'Add Index.html'
계정 설정
git config --global user.email "~~~@~~~"
git config --global user.name "~~"

git log 버전 확인
git status 변경점 확인
add 하면 staging에 commit 하면 repository에
staging area 실적용 전 테스트를 위한 서버, 중간 임시

git은 파일시스템의 스냅샨으로 관리하기 때문에 크기가 작음
파일이 다라라지지 않으면 성능을 위해 저장하지 않음

untracked files 기록된적 없는 파일
changes not staged for commit 커밋이 된적 있고 변경, add 안함
changes to be commited add되어 커밋될 예쩡

git remote add origin https://github.com/KGB6753/django01.git
git push origin main


git pull 원격저장소이름, 브랜치 이름


# 실습: TIL
1. 바탕화면에 TIL 폴더를 만들고
2. 정리했던 마크다운 파일을 옮기고
3. 저장소 설정하고 git init
4. 커밋을 하고 add, commit
5. github에 들어가서 원격저장소를 til이름으로 만들고
6. 원격 저장소 설정을 하고 git remote add origin
7. push
8. 시트에 들어와서 주소를 기입한다.

## 이후로
옵션
1. 오늘 배운 내용을 정리하고 커밋 푸시
2. Django 등 이제까지 배웠던 내용들 정리해서 커밋 푸시
3. Django 프로젝트를 새로 열어서 게시판 만들면서 자연스럽게 버전 기록


git remote remove origin 연결 끊기

.gitignore  만들어서

__pycache__/
a.txt
이렇게 목록 넣으면 보지마


버전관리와 상관없는 파일 관리...
특정파일, 디렉토리 확장자 예외처리

이미 커밋된건 안된다...

프로젝트 시작 전에 미리 확인

https://gitignore.io

여기서 추가해 넣으면 된다.. 개발언어랑 개발환경


https://desktop.github.com/
https://education.github.com/pack/join
https://git-scm.com/book/ko/v2
https://docs.github.com/en/get-started/quickstart/hello-world

rewind ai

https://www.youtube.com/watch?v=LnjVbU6Ld1M


--------------
BRANCH
---------------
독립적인 작업흐름을 만들고 관리

브랜치 합칠때 merge

board작업시에 main과 관련된 수정이 일어난 상태에서 merge 하면 어떻게 되나요?

git status - 동시에 수정된 파일 확인가능
충돌 발생 후에
git add .
git commit 해서 하자

병합한 branch는 삭제하자

main 브랜치는 직접 push 할 수 없도록 막아둠
=>PR로만 가능함

리뷰가 필수인 경우
=> 꼭 리뷰어를 3명을 반드시 통과해야한 PR을 Merge 버튼 활성화

관리자(시니어급) Merge를 하도록 하기도 함

GitHub으로 협업을 한다는 것은
(1) 작업하기 전에 브랜치르 만든다.
git branch (branch name)
git checkout (branch name)
(2) 열심히 코딩한다.
(3) 버전을 기록한다.(커밋)
git add ./ git commit -m ''

(4) 작업이 끝나면, 작업한 브랜치를 push한다.
git push origin 브랜치이름

(5) GitHub에 Pull Request를 생성한다.
(6) 코드 리뷰 등 협업 룰에 따라서 진행하고 다 완료되면 merge가 GitHub에서 된다.

GitHub Flow Models
- Shared Repository Model
- Fork & Pull Model

풀리퀘스트 창에서 head -> base


남의 repo에서 fork 누르고 내껄로 만든 다음에
링크 복사
git bash로 git clone <link>

작업
애드 커밋 푸쉬, pull request




# Git/GitHub 활용 실습

## 프로젝트 - 프로필

1. 프로젝트 시작
	- 바탕화면에 폴더 생성
	- README.md 파일이 반드시 필요
	- git 저장소로 만들고 커밋
2. GitHub
	- 원격저장소 이름은 **반드시 여러분의 `username`으로!**
	- 원격저장소 설정을 마무리하고 push하면 끝!
3. 프로필 확인 : https
4. 실습 완료 후 체크시트에 링크 업데이트
5. 구글에 GitHub Profile Readme라고 검색해보시면 정말 다양하게 꾸미고, 설정할 수 있는 방법이 있습니다.
